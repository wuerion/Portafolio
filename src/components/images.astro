---
import type { ImageMetadata } from "astro";
import { getImage } from "astro:assets";

interface Props {
    ImgUrl: string | ImageMetadata;
    alt: string;
    addClass?: string;
    contClass?: string;
    isLCP?: boolean; 
}

const { ImgUrl, alt, addClass, contClass = "", isLCP = false } = Astro.props;

const sizes = [200, 400, 800]; // TamaÃ±os de imagen que deseas generar

const images = await Promise.all(
    sizes.map(async (size) => {
        return await getImage({
            src: ImgUrl,
            format: "webp",
            width: size,
        });
    })
);

const srcset = images.map((image) => `${image.src} ${image.attributes.width}w`).join(", ");
---

<picture class={contClass}>
    <img
        src={images[0].src}
        srcset={srcset}
        sizes="(max-width: 100px) 100vw, 700px"
        alt={alt}
        class={addClass}
        loading="eager"
    />
</picture>
<!-- se pre carge si es necesario  -->
{
    isLCP && (
        <script>
            // Precarga de la imagen LCP (en el head)
    const head = document.querySelector('head');
    const preloadLink = document.createElement('link');
    preloadLink.rel = 'preload';
    preloadLink.href = Astro.props.images[0].src;
    preloadLink.as = 'image';
    preloadLink.type = 'image/webp';
    head.appendChild(preloadLink);
        </script>
    )
}
